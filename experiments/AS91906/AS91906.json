{
  "meta": {
    "as_code": "AS91906",
    "title": "Use complex programming techniques to develop a computer program",
    "version": "2",
    "credits": 6,
    "assessment_type": "Internal",
    "source_pdf": "as91906.pdf",
    "purpose": "This achievement standard involves using complex programming techniques to develop a computer program."
  },
  "grade_descriptors": {
    "N1": "Evidence does not reach the minimum threshold for Achieved-level indicators.",
    "N2": "Some Achieved-level indicators are met, but not enough to satisfy all required Achieved criteria.",
    "A3": "All Achieved-level indicators are met; no Merit-level indicator meets the Merit threshold.",
    "A4": "All Achieved indicators are met and at least one Merit indicator is met, but overall performance is below the Merit threshold.",
    "M5": "All Achieved indicators are met and the Merit threshold is reached; no Excellence-level indicator meets the Excellence threshold.",
    "M6": "All Achieved indicators are met, all Merit indicators are met, and at least one Excellence indicator is met, but overall performance is below the Excellence threshold.",
    "E7": "All Achieved and Merit indicators are met and the Excellence threshold is reached, but not all Excellence indicators are met.",
    "E8": "All Achieved, Merit, and Excellence indicators are met."
  },
  "key_terms": [
    {
      "term": "boundary testing",
      "definition": "Testing values just below, on, and just above a defined limit to confirm correct behaviour."
    },
    {
      "term": "invalid case",
      "definition": "Input outside the allowed domain that the program must handle gracefully."
    }
  ],
  "omis": [
    {
      "id": "performs_specified_task",
      "description": "Program demonstrably performs the specified task from the assessment brief.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Show the program running with screenshots or a short screencast. Link each observed behaviour to the brief (✓ checklist). Generic statements are insufficient.",
      "success_examples": [
        "Screencast runs through menu options that match the brief.",
        "Log shows 'Input: 3,2,1 → Output: [1, 2, 3]' for the sort step."
      ]
    },
    {
      "id": "uses_functions_and_lists",
      "description": "Program uses at least two advanced techniques in Python 3: (1) functions with parameters and return values; AND (2) lists that are accessed/updated meaningfully (looping, indexing, filtering, aggregating). Other advanced techniques may also be included.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Provide code excerpts showing (a) a function that takes an argument and returns a value; (b) a list used beyond trivial storage (e.g., append + later read, loop, index, compute min/max/avg). Stubs or unused code do not count.",
      "success_examples": [
        "def add(a, b): return a + b",
        "guesses = []; guesses.append(user_guess); print(len(guesses))",
        "scores = [15, 12, 18]; average = sum(scores) / len(scores)"
      ]
    },
    {
      "id": "code_layout_readable",
      "description": "Code is clearly laid out: consistent indentation and spacing improve readability.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Use 4-space indentation consistently, add blank lines between functions, and group related lines. A single banner comment cannot compensate for poor layout.",
      "success_examples": [
        "Functions separated by blank lines; all blocks use 4-space indentation."
      ]
    },
    {
      "id": "comments_present_documenting_code",
      "description": "Comments explain the purpose and behaviour of main code sections.",
      "level": "A",
      "weight": 1,
      "detection_hint": "At least two comments in different sections that describe purpose/behaviour (not single words). Avoid restating obvious syntax.",
      "success_examples": [
        "# Ask user to guess the number",
        "# Calculate average score from list"
      ]
    },
    {
      "id": "testing_evidence_organised",
      "description": "Testing evidence is organised to show inputs and whether expected outputs occurred.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Use a simple table or screenshots mapping Input → Expected → Actual → Pass/Fail. Include at least one bug found/fixed and re-tested.",
      "success_examples": [
        "Input: 5 → Expected: 'Correct'; Actual: 'Correct' (after fixing loop).",
        "Table row: Name=Sam → 'Hello Sam' (pass)"
      ]
    },
    {
      "id": "testing_expected_cases",
      "description": "Testing shows the program works on a sample of typical/expected inputs and includes at least one debugging fix.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Provide a sample of at least 3–4 normal-case tests with Expected vs Actual, plus one before/after example linked to a fix (commit/message or note).",
      "success_examples": [
        "Before: wrong total = 25; After: fixed formula → total = 30 (pass)",
        "Three typical inputs for the quiz show correct scoring and feedback."
      ]
    },
    {
      "id": "appropriate_names_and_comments",
      "description": "Document the program with appropriate names and comments that describe code function and behaviour.",
      "level": "M",
      "weight": 1,
      "detection_hint": "Check that identifiers reflect role/content (e.g., total_score, player_name) and that comments explain WHY sections exist (purpose/behaviour), not line-by-line WHAT. Names and comments should be consistent across the program.",
      "success_examples": [
        "player_name, total_score, max_tries (avoids x1/tmp).",
        "# Update leaderboard after each round (explains purpose).",
        "# Validate input and collect error messages for the user."
      ]
    },
    {
      "id": "follows_language_conventions",
      "description": "Follow common conventions for the chosen programming language throughout.",
      "level": "M",
      "weight": 1,
      "detection_hint": "Demonstrate consistent idiomatic usage: Python snake_case for functions/variables, CapWords for classes, 4-space indentation, clear if/elif/else and for/while usage. Mixed styles without rationale are insufficient.",
      "success_examples": [
        "def calculate_total(): ...",
        "while guess != target: ...",
        "Consistent 4-space indentation; no mixed tabs/spaces."
      ]
    },
    {
      "id": "boundary_testing_performed",
      "description": "Test and debug the program effectively so it works on a sample of both expected cases and relevant boundary cases.",
      "level": "M",
      "weight": 2,
      "detection_hint": "Provide specific tests for at least one identified boundary: below / on / above, with Expected vs Actual and Pass/Fail. Include evidence of debugging where a boundary initially failed (before/after note or commit). This is in addition to normal/expected-case tests.",
      "success_examples": [
        "Age (12–18): 11 → reject, 12 → accept, 19 → reject (all pass).",
        "Page size (1–100): 0 → error, 1 → ok, 101 → error (after fix passes).",
        "Table shows 3–4 expected cases all passing + boundary row re-tested after fix."
      ]
    },
    {
      "id": "well_structured_logical_response",
      "description": "Ensure the program is a well-structured, logical response to the specified task.",
      "level": "E",
      "weight": 1,
      "detection_hint": "Show clear separation of concerns using functions (e.g., input → process → output). Minimise duplication; keep data flow simple and traceable. The structure should match the brief (each requirement handled in a clear place).",
      "success_examples": [
        "Functions: get_input(), validate_age(a), compute_score(lst), show_results(scores).",
        "Main flow calls functions in a simple order; no copy-paste branches.",
        "List holds attempts; helpers read/update it rather than repeating logic."
      ]
    },
    {
      "id": "flexible_values_over_literals",
      "description": "Make the program flexible: avoid magic numbers; prefer variables/constants/parameters and simple derived values.",
      "level": "E",
      "weight": 1,
      "detection_hint": "Replace repeated literals with named values; pass values into functions as parameters; compute results from inputs. Show one place to change a setting (e.g., MAX_TRIES, PASS_MARK).",
      "success_examples": [
        "MAX_TRIES = 5; PASS_MARK = 50",
        "def apply_discount(price, rate): return price * rate",
        "Thresholds read once, reused across checks (no repeated ‘50’)."
      ]
    },
    {
      "id": "robustness_evidenced_by_testing",
      "description": "Make the program robust: handle invalid/unexpected input and keep a correct, usable state.",
      "level": "E",
      "weight": 1,
      "detection_hint": "Link adverse tests to behaviour: clear error messages, retries, safe defaults, lists/state not corrupted. Show that after an error the program still works (next action succeeds).",
      "success_examples": [
        "Input: 'abc' → 'Please enter a number.' (re-prompt; no crash).",
        "Out-of-range age → message + retry; stored results unchanged.",
        "Empty list case handled: average() returns 0 and shows hint."
      ]
    },
    {
      "id": "comprehensive_testing_invalid_unexpected",
      "description": "Comprehensively test and debug the program: include expected, boundary, and invalid/unexpected cases with re-tests after fixes.",
      "level": "E",
      "weight": 2,
      "detection_hint": "Provide an organised test table (Input → Expected → Actual → Pass/Fail → Notes). Cover: (1) 3–4 typical cases; (2) below/on/above at least one boundary; (3) at least one invalid/unexpected per key input. Show at least one failing test, the fix, and a passing re-test.",
      "success_examples": [
        "Age (12–18): 11 ✗ (fixed) → re-test ✓; 12 ✓; 19 ✓.",
        "qty='abc' → error message + retry (✓).",
        "Summary: 10 tests total → 9 pass; 1 fixed then re-tested → pass."
      ]
    }
  ],
  "aggregation_rules": {
    "method": "hierarchical",
    "gate_sequence": ["A", "M", "E"],
    "levels": {
      "A": { "required_fraction": 1.0 },
      "M": { "required_fraction": 0.60 },
      "E": { "required_fraction": 0.50 }
    }
  },
  "governance": {
    "last_validated": "2025-10-02",
    "change_log": [
      "v2: Updated to AS91906 metadata; merged Achieved/Merit/Excellence OMIs aligned with AS92004 overlaps (detection hints and success examples), Python-focused, functions + lists baseline, comprehensive testing requirements."
    ]
  }
}
