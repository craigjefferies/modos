# AS92004 Level 1 Task Collection (Updated — Counter, Classifier, Accumulator)

---
***Important Note***  
- These Level 1 programming tasks are designed for short, supervised assessment sessions (around 60 minutes).  
- Each task explicitly requires **numeric input** (integer or float) and **at least one string input** (e.g., a name or label) so that two data types are demonstrated.  
- Programs must include **loops**, **conditional logic**, **lists**, and simple **calculations or validation**.  
- **No functions, imports, or complex structures** are required.  
---

## 1. Deep Sea Seismic Event Logger *(Counter Task)*

### Context
A marine research team monitors seismic activity in deep-sea vents. Your program records a series of tremor severity readings and reports how many fall into a “High Risk” range.

### Task Specifications
- Ask for the **researcher’s name** (string).  
- Repeatedly ask for tremor severity values (1.0–9.9).  
- Type `"Stop"` when all readings have been entered.  
- Store valid values in a list.  
- Each valid reading must be checked:  
  - Below 7.5 → “Normal”  
  - 7.5 or above → “High Risk”  
- At the end:  
  - Print the researcher’s name.  
  - Print all readings entered.  
  - Print how many were “High Risk”.

### Input Requirements
- Accept only numbers between 1.0 and 9.9.  
- Show an error message if an invalid value or text (other than `"Stop"`) is entered.

### Test Cases

| Test Type | Input | Expected Output |
|------------|--------|-----------------|
| Expected | Name: Sam; 6.5, 7.8, 8.1, Stop | 2 High Risk readings |
| Boundary | Name: Jo; 7.4, 7.5, 7.6, Stop | 2 High Risk, 1 Normal |
| Invalid | Name: Kim; "banana", 10, Stop | Error messages shown, invalids ignored |

---

## 2. Satellite Repair Log *(Classifier Task)*

### Context
A space agency tracks how long it takes to repair satellites after equipment failures. Your program sorts these repair times into performance categories.

### Task Specifications
- Ask for the **technician’s name** (string).  
- Repeatedly ask for repair times in hours (0–100).  
- Type `-1` when all times are entered.  
- Store valid repair times in a list.  
- Classify each repair time as:  
  - “Rapid” if less than 12 hours  
  - “Standard” if between 12 and 48 hours (inclusive)  
  - “Prolonged” if greater than 48 hours  
- At the end:  
  - Print the technician’s name.  
  - Print how many repairs fall into each category.

### Input Requirements
- Accept only numbers between 0 and 100.  
- Type `-1` to finish input.  
- Show an error message for negative numbers (other than `-1`) or values above 100.

### Test Cases

| Test Type | Input | Expected Output |
|------------|--------|-----------------|
| Expected | Name: Alex; 10, 20, 60, -1 | 1 Rapid, 1 Standard, 1 Prolonged |
| Boundary | Name: Lee; 11, 12, 13, 47, 48, 49, -1 | Categories counted correctly |
| Invalid | Name: Pat; "Monday", -2, 150, -1 | Error messages, invalid skipped |

---

## 3. Recipe Calorie Totaler *(Accumulator Task)*

### Context
A nutrition research lab needs a program to calculate the total calories in experimental recipes. Each ingredient’s calorie value (per 100 g) is entered until the list is complete.

### Task Specifications
- Ask for the **recipe name** (string).  
- Ask repeatedly for ingredient calorie values (5–500).  
- Enter `0` when finished.  
- Store all valid values in a list.  
- Keep a **running total** of calories.  
- At the end:  
  - Print the recipe name.  
  - Display each calorie value entered.  
  - Print the total calorie count and how many ingredients were recorded.

### Input Requirements
- Accept only whole numbers between 5 and 500.  
- Type `0` to finish input.  
- Show an error message for non-numeric or out-of-range inputs.

### Test Cases

| Test Type | Input | Expected Output |
|------------|--------|-----------------|
| Expected | Name: Salad; 120, 200, 180, 0 | Total = 500, 3 ingredients |
| Boundary | Name: Soup; 5, 500, 0 | Accepted, total = 505 |
| Invalid | Name: Pie; "three", 501, 4, 0 | Error messages shown, invalids skipped |

---

### Summary of Task Types

| Task Type | Core Skill Tested | What Students Demonstrate |
|------------|------------------|---------------------------|
| **Counter** | Looping + conditional logic | Ability to combine iteration and selection to count items meeting a rule. |
| **Classifier** | Multi-branch decision making + boundary control | Ability to order and manage multiple conditions accurately. |
| **Accumulator** | State management + validation | Ability to maintain a running total or changing state with correct control flow. |
