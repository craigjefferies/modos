{
  "meta": {
    "as_code": "AS92004",
    "title": "Create a computer program",
    "version": "2",
    "credits": 5,
    "assessment_type": "Internal",
    "source_pdf": "as92004 (1).pdf",
    "purpose": "Students are able to create a computer program that meets given specifications and demonstrates testing, debugging, and documentation."
  },
  "grade_descriptors": {
    "N1": "Evidence does not reach the minimum threshold for Achieved-level indicators.",
    "N2": "Some Achieved-level indicators are met, but not enough to satisfy all required Achieved criteria.",
    "A3": "All Achieved-level indicators are met; no Merit-level indicator meets the Merit threshold.",
    "A4": "All Achieved indicators are met and at least one Merit indicator is met, but overall performance is below the Merit threshold.",
    "M5": "All Achieved indicators are met and the Merit threshold is reached; no Excellence-level indicator meets the Excellence threshold.",
    "M6": "All Achieved indicators are met, all Merit indicators are met, and at least one Excellence indicator is met, but overall performance is below the Excellence threshold.",
    "E7": "All Achieved and Merit indicators are met and the Excellence threshold is reached, but not all Excellence indicators are met.",
    "E8": "All Achieved, Merit, and Excellence indicators are met."
  },
  "key_terms": [
    {
      "term": "boundary testing",
      "definition": "Testing values just below, on, and just above a defined limit to confirm correct program behaviour."
    },
    {
      "term": "invalid case",
      "definition": "Input outside the allowed domain that the program must handle gracefully."
    }
  ],
  "omis": [
    {
      "id": "store_two_data_types",
      "description": "Program stores at least two distinct data types in variables.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Look for two different data types (e.g., string and integer) assigned to variables. Collections count as a type only if they store a different type from other variables. Highlight phrases showing assignments or violations.",
      "success_examples": ["termination_value = \"4\"  # string; guesses_count = 3  # integer"],
      "source_ref": "AS PDF p1 Explanatory Note 2"
    },
    {
      "id": "uses_core_structures_collection",
      "description": "Program uses sequence, selection, iteration, and accesses data in a collection.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Require at least one if/else (selection), one loop (iteration), and collection access (e.g., append, index, or loop over). Mere initialisation without access does not count. Highlight phrases showing use or lack thereof.",
      "success_examples": ["Guesses.append(answer)", "for item in items:"],
      "source_ref": "AS PDF p1 ¶‘The computer program must…’"
    },
    {
      "id": "testing_expected_cases",
      "description": "Testing evidence shows the program works with expected inputs.",
      "level": "A",
      "weight": 1,
      "detection_hint": "Need specific inputs, expected/actual outputs, and at least one debugging example (e.g., before/after code or table notes). Screenshots/screencasts required; generic claims insufficient. Highlight phrases with details or omissions.",
      "success_examples": ["Input: 5 → Expected: 'Correct'; Actual: 'Correct' (debugged loop error)"],
      "source_ref": "Moderator Guide p1 Criteria 2"
    },
    {
      "id": "basic_comments_present",
      "description": "Code contains comments documenting the program.",
      "level": "A",
      "weight": 1,
      "detection_hint": "At least two comments in different sections, describing purpose/behaviour (not single words). Spread through code; line-by-line 'what' insufficient. Highlight comments or inadequate examples.",
      "success_examples": ["# Ask user to guess the number", "# Display all previous guesses"],
      "source_ref": "AS PDF p1 Explanatory Note 1"
    },
    {
      "id": "descriptive_variable_names",
      "description": "Variable names are succinct and descriptive.",
      "level": "M",
      "weight": 1,
      "detection_hint": "Names should reflect content/role (e.g., total_score); avoid obscure like x1 or tmp. Consistent with language conventions ideal but not required. Highlight examples of good/poor names.",
      "success_examples": ["player_age", "termination_value"],
      "source_ref": "Moderator Guide p4 Criteria 1"
    },
    {
      "id": "comments_clarify_purpose",
      "description": "Comments consistently explain the purpose of each code section.",
      "level": "M",
      "weight": 1,
      "detection_hint": "Comments must explain WHY sections exist (purpose), consistent across significant blocks; not line-by-line operations or justifications. Highlight clarifying comments or inconsistencies.",
      "success_examples": ["# Check if the car is valid", "# Update leaderboard after each round"],
      "source_ref": "Moderator Guide p4 Criteria 2"
    },
    {
      "id": "boundary_testing_performed",
      "description": "Testing evidence includes at least one on‑, below‑, and above‑boundary value for each boundary.",
      "level": "M",
      "weight": 1,
      "detection_hint": "Require specific numeric tests for each boundary (below/on/above); identify boundaries from task/code. Minimum: two tests (on/outside) for one boundary; vague mentions insufficient. Highlight test values or gaps.",
      "success_examples": ["Age boundary (12-18): 11 (below), 12 (on), 19 (above)"],
      "source_ref": "Moderator Guide p5 Boundary testing"
    },
    {
      "id": "effective_control_structures",
      "description": "Conditions and control structures are used effectively to reduce repetition and errors.",
      "level": "E",
      "weight": 1,
      "detection_hint": "Look for chained/nested conditions, Boolean operators, ordered ifs, or natural loops to minimise repetition/errors. Duplicated logic or inefficient checks do not count. Highlight effective structures or redundancies.",
      "success_examples": ["while guess != target and attempts < MAX_TRIES:"],
      "source_ref": "Moderator Guide p6 Criteria 1"
    },
    {
      "id": "flexible_values_over_literals",
      "description": "Program uses constants, variables, or derived values instead of hard‑coded literals to enable flexibility.",
      "level": "E",
      "weight": 1,
      "detection_hint": "Use constants/variables/calculations for easy changes; avoid repeated literals without rationale. Focus on maintainability for programmer. Highlight flexible uses or hardcoded literals.",
      "success_examples": ["MAX_TRIES = 5  # constant", "discount = price * GST_RATE"],
      "source_ref": "Moderator Guide p6 Criteria 2"
    },
    {
      "id": "invalid_case_testing",
      "description": "Testing demonstrates program handles invalid inputs gracefully.",
      "level": "E",
      "weight": 1,
      "detection_hint": "At least one invalid test per most inputs, with handling (e.g., error message, retry). Show robustness; unhandled errors fail. Highlight test cases with inputs/outputs or unhandled cases.",
      "success_examples": ["Input: 'abc' (invalid) → Output: 'Please enter a number.'"],
      "source_ref": "Moderator Guide p6 Criteria 3"
    }
  ],
  "aggregation_rules": {
    "method": "hierarchical",
    "gate_sequence": ["A", "M", "E"],
    "levels": {
      "A": {
        "required_fraction": 1.0
      },
      "M": {
        "required_fraction": 0.60
      },
      "E": {
        "required_fraction": 0.50
      }
    },
    "sub_band_logic": {
      "Achieved": {
        "A3": {
          "extra_merit_indicators": 0
        },
        "A4": {
          "extra_merit_indicators": "≥1"
        }
      },
      "Merit": {
        "M5": {
          "extra_excellence_indicators": 0
        },
        "M6": {
          "extra_excellence_indicators": "≥1"
        }
      },
      "Excellence": {
        "E7": {
          "excellence_fraction": "<1.0"
        },
        "E8": {
          "excellence_fraction": "1.0"
        }
      }
    },
    "fallback_grade": "N1"
  },
  "governance": {
    "last_validated": "2025-07-18",
    "change_log": []
  }
}
